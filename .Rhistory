scale_shape_manual(values = c(1, 2), labels = c("Female", "Male"))
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.2, 0.8),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#e63946", "#023e8a"), labels = c("Female", "Male")) +
scale_shape_manual(values = c(1, 6), labels = c("Female", "Male"))
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.2, 0.8),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#023e8a", "#e63946"), labels = c("Male", "Female")) +
scale_shape_manual(values = c(1, 6), labels = c("Female", "Male"))
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.2, 0.8),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#e63946", "#023e8a"), labels = c("Female", "Male")) +
scale_shape_manual(values = c(1, 2), labels = c("Female", "Male"))
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.2, 0.8),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#e63946", "#023e8a"), labels = c("Female", "Male")) +
scale_shape_manual(values = c(1, 6), labels = c("Female", "Male"))
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.2, 0.8),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#e63946", "#023e8a"), labels = c("Female", "Male")) +
scale_shape_manual(values = c(1, 6), labels = c("Female", "Male")) +
guides(shape = guide_legend(reverse = TRUE),
color = guide_legend(reverse = TRUE))
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.1, 0.9),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#e63946", "#023e8a"), labels = c("Female", "Male")) +
scale_shape_manual(values = c(1, 6), labels = c("Female", "Male")) +
guides(shape = guide_legend(reverse = TRUE),
color = guide_legend(reverse = TRUE))
dat <- read_tsv("data/Homework4_data-1.txt")
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3, stroke = 2) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.1, 0.9),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#e63946", "#023e8a"), labels = c("Female", "Male")) +
scale_shape_manual(values = c(1, 6), labels = c("Female", "Male")) +
guides(shape = guide_legend(reverse = TRUE),
color = guide_legend(reverse = TRUE))
ggplot() + geom_point(data = dat, aes(x = height, y = weight,
color = as.factor(sex), shape = as.factor(sex)), size = 3, stroke = 1) +
theme_classic() +
labs(x = "Height (cm)",
y = "Weight (kg)") +
theme(legend.position = c(0.1, 0.9),
legend.background = element_rect(color = "black"),
legend.title = element_blank()) +
scale_color_manual(values = c("#e63946", "#023e8a"), labels = c("Female", "Male")) +
scale_shape_manual(values = c(1, 6), labels = c("Female", "Male")) +
guides(shape = guide_legend(reverse = TRUE),
color = guide_legend(reverse = TRUE))
# Consider again the iris data set. Write an R expression that will generate a two-way
# frequency table with two rows and three colums. The rows should relate
# to Sepal.length (less than 5: TRUE or FALSE) and columns to Species, with the
# following output:
spl <- iris$Sepal.Length
index <- spl < 5
cbind(index, iris$Species)
table(
cbind(index, iris$Species)
)
iris %>%
mutate(check = ifelse(Sepal.Length < 5, TRUE, FALSE)) %>%
summarise(Species, check) %>%
table()
library(tidyverse)
iris %>%
mutate(check = ifelse(Sepal.Length < 5, TRUE, FALSE)) %>%
summarise(Species, check) %>%
table()
# Consider again the iris data set. Write an R expression that will generate a two-way
# frequency table with two rows and three colums. The rows should relate
# to Sepal.length (less than 5: TRUE or FALSE) and columns to Species, with the
# following output:
spl <- iris$Sepal.Length
index <- spl < 5
table(
cbind(index, iris$Species)
)
iris %>%
mutate(check = ifelse(Sepal.Length < 5, TRUE, FALSE)) %>%
summarise(Species, check) %>%
table()
as.character(iris$Species)
table(
cbind(index, as.character(iris$Species))
)
cbind(index, as.character(iris$Species))
table(
cbind(index, as.character(iris$Species))
)
table(
rbind(index, as.character(iris$Species))
)
iris %>%
mutate(check = ifelse(Sepal.Length < 5, TRUE, FALSE)) %>%
summarise(Species, check) %>%
table()
# Consider again the iris data set. Write an R expression that will generate a two-way
# frequency table with two rows and three colums. The rows should relate
# to Sepal.length (less than 5: TRUE or FALSE) and columns to Species, with the
# following output:
spl <- iris$Sepal.Length > 5
index <- as.character(iris$Species)
table(
rbind(index, spl))
table(
rbind(index, spl)))
table(
rbind(index, spl))
table(rbind(index, spl), deparse.level = 0)
table(rbind(index, spl), deparse.level = 2)
table(rbind(index, spl), deparse.level = 4)
table(rbind(index, spl), deparse.level = 3)
table(index, spl)
# If x <- factor(c("high", "low", "medium", "high", "high", "low", "medium")),
# write an R expression that will provide unique numeric values for various levels of x
x <- factor(c("high", "low", "medium", "high", "high", "low", "medium"))
data.frame(levels = levels(x), value = c(1, 2, 3))
# Consider the following data obtained from df <- data.frame (Name = c(NA, “Joseph”,
# “Martin”, NA, “Andrea”), Sales = c(15, 18, 21, 56, 60), Price = c(34, 52, 21,
# 44, 20), stringsAsFactors = FALSE)
# Write some R code that will return a data frame which removes all rows with NA values
# in Name column
df <- data.frame(Name = c(NA, "Joseph", "Martin", NA, "Andrea"),
Sales = c(15, 18, 21, 56, 60),
Price = c(34, 52, 21, 44, 20),
stringsAsFactors = FALSE)
df %>%
dplyr::filter(!is.na(Name))
library(tidyverse)
# Consider the iris data set in R. Write an R expression that will ‘cut’ the Sepal.Length variable and create the following factor with five levels.
# 4.3, 5.02] (5.02, 5.74] (5.74, 6.46] (6.46, 7.18] (7.18, 7.9]
# 32 41 42 24 11
data(iris)
sepl <- cut(iris$Sepal.Length, 5)
levels(sepl)
# Consider again the iris data set. Write an R expression that will generate a two-way
# frequency table with two rows and three colums. The rows should relate
# to Sepal.length (less than 5: TRUE or FALSE) and columns to Species, with the
# following output:
spl <- iris$Sepal.Length > 5
index <- as.character(iris$Species)
table(index, spl)
iris %>%
mutate(check = ifelse(Sepal.Length < 5, TRUE, FALSE)) %>%
summarise(Species, check) %>%
table()
# Later it was found that new a level "Strongly Disagree" exists. Write an R expression that
# will include "strongly disagree" as new level attribute of the factor and returns the following
# output:
responses <- factor(c("Agree", "Agree", "Strongly Agree", "Disagree", "Agree"), levels = c("Strongly Agree", "Agree", "Disagree"))
levels(responses) <- c(levels(responses), "Strongly Disagree")
responses
# Let x <- data.frame(q=c(2, 4, 6), p=c("a", "b", "c")). Write an R statement that
# will replace levels a, b, c with labels "fertiliser1", "fertliser2", "fertiliser3".
x <- data.frame(q = c(2, 4, 6), p = c("a", "b", "c"))
x$p <- factor(x$p, labels = c("fertiliser1", "fertliser2", "fertiliser3"))
x
# If x <- factor(c("high", "low", "medium", "high", "high", "low", "medium")),
# write an R expression that will provide unique numeric values for various levels of x
x <- factor(c("high", "low", "medium", "high", "high", "low", "medium"))
data.frame(levels = levels(x), value = c(1, 2, 3))
# Consider the following data obtained from df <- data.frame (Name = c(NA, “Joseph”,
# “Martin”, NA, “Andrea”), Sales = c(15, 18, 21, 56, 60), Price = c(34, 52, 21,
# 44, 20), stringsAsFactors = FALSE)
# Write some R code that will return a data frame which removes all rows with NA values
# in Name column
df <- data.frame(Name = c(NA, "Joseph", "Martin", NA, "Andrea"),
Sales = c(15, 18, 21, 56, 60),
Price = c(34, 52, 21, 44, 20),
stringsAsFactors = FALSE)
df %>%
dplyr::filter(!is.na(Name))
# Consider the iris data set in R. Write an R expression that will ‘cut’ the Sepal.Length variable and create the following factor with five levels.
# 4.3, 5.02] (5.02, 5.74] (5.74, 6.46] (6.46, 7.18] (7.18, 7.9]
# 32 41 42 24 11
data(iris)
sepl <- cut(iris$Sepal.Length, 5)
levels(sepl)
setwd("~/LocalRStudio/LJ_Leading_Indicators")
setwd("~/LocalRStudio/LJ_Leading_Indicators")
source(Transform.R)
source(Tranform.R)
source("Tranform.R")
source("Digest.R")
setwd("~/LocalRStudio/LJ_Leading_Indicators")
source("Tranform.R")
source("Digest.R")
# some important variables
tail(features)
# some important variables
month(tail(features, 1))
# some important variables
max(features$date)
# some important variables
month(max(features$date))
# some important variables
max(features$date)
View(KDAt)
KDAt_nm <- filter(KDAt, date >= floor_date(max(features$date)))
View(KDAt_nm)
KDAt_nm <- filter(KDAt, date >= floor_date(max(features$date)) & date < stop_date)
KDAt_nm <- filter(KDAt, ym(date) == ym(stop_date) & date < stop_date)
KDAt_nm <- filter(KDAt, ym(date) == ym(stop_date))
ym(KDAt$date)
lubridate::ym(KDAt$date)
lubridate::ym(day_1_c$date)
lubridate::month(day_1_c$date)
lubridate::ymd(day_1_c$date)
lubridate::ym(day_1_c$date)
lubridate::year(day_1_c$date)
ym(stop_date)
ymd(stop_date)
KDAt_nm <- filter(KDAt, ym(date) == ym(stop_date))
setwd("~/LocalRStudio/LJ_Leading_Indicators")
source("Tranform.R")
source("Digest.R")
setwd("~/LocalRStudio/LJ_Leading_Indicators")
source("Tranform.R")
source("Digest.R")
# some important variables
max(features$date)
KDAt_nm <- filter(KDAt, ym(date) == ym(stop_date))
View(KDAt)
# generated on
today <- Sys.Date()
dplyr::filter(data > (today - 30)
KDAt_nm <- KDAt %>%
KDAt_nm <- KDAt %>%
dplyr::filter(data > (today - 30))
KDAt_nm <- KDAt %>%
dplyr::filter(date > (today - 30))
today - 30
KDAt_nm <- KDAt %>%
dplyr::filter(date > stop_date - 30)
KDAt_nm <- KDAt %>% # new month
dplyr::filter(date >= max(floor_date(date)))
View(KDAt_nm)
KDAt_nm <- KDAt %>% # new month
dplyr::filter(date >= max(floor_date(date, "month")))
View(KDAt_nm)
theme_gppr <- function(){
font <- "Georgia"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
#grid elements
panel.grid.major = element_blank(),    #strip major gridlines
panel.grid.minor = element_blank(),    #strip minor gridlines
axis.ticks = element_blank(),          #strip axis ticks
#since theme_minimal() already strips axis lines,
#we don't need to do that again
#text elements
plot.title = element_text(             #title
family = font,            #set font family
size = 20,                #set font size
face = 'bold',            #bold typeface
hjust = 0,                #left align
vjust = 2),               #raise slightly
plot.subtitle = element_text(          #subtitle
family = font,            #font family
size = 14),               #font size
plot.caption = element_text(           #caption
family = font,            #font family
size = 9,                 #font size
hjust = 1),               #right align
axis.title = element_text(             #axis titles
family = font,            #font family
size = 10),               #font size
axis.text = element_text(              #axis text
family = font,            #axis famuly
size = 9),                #font size
axis.text.x = element_text(            #margin for axis text
margin=margin(5, b = 10))
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ggplot() + geom_point(aes(x = year, y = ycount))
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n())
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_point(aes(x = date, y = ycount))
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_line(aes(x = date, y = ycount))
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_line(aes(x = date, y = ycount)) +
theme_ggpr()
theme_gppr <- function(){
font <- "Georgia"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
#grid elements
panel.grid.major = element_blank(),    #strip major gridlines
panel.grid.minor = element_blank(),    #strip minor gridlines
axis.ticks = element_blank(),          #strip axis ticks
#since theme_minimal() already strips axis lines,
#we don't need to do that again
#text elements
plot.title = element_text(             #title
family = font,            #set font family
size = 20,                #set font size
face = 'bold',            #bold typeface
hjust = 0,                #left align
vjust = 2),               #raise slightly
plot.subtitle = element_text(          #subtitle
family = font,            #font family
size = 14),               #font size
plot.caption = element_text(           #caption
family = font,            #font family
size = 9,                 #font size
hjust = 1),               #right align
axis.title = element_text(             #axis titles
family = font,            #font family
size = 10),               #font size
axis.text = element_text(              #axis text
family = font,            #axis famuly
size = 9),                #font size
axis.text.x = element_text(            #margin for axis text
margin=margin(5, b = 10))
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_line(aes(x = date, y = ycount)) +
theme_ggpr()
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_line(aes(x = date, y = ycount)) +
theme_gppr()
theme_gppr <- function(){
font <- "Georgia"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
#grid elements
panel.grid.major = element_blank(),    #strip major gridlines
panel.grid.minor = element_blank(),    #strip minor gridlines
#since theme_minimal() already strips axis lines,
#we don't need to do that again
#text elements
plot.title = element_text(             #title
family = font,            #set font family
size = 20,                #set font size
face = 'bold',            #bold typeface
hjust = 0,                #left align
vjust = 2),               #raise slightly
plot.subtitle = element_text(          #subtitle
family = font,            #font family
size = 14),               #font size
plot.caption = element_text(           #caption
family = font,            #font family
size = 9,                 #font size
hjust = 1),               #right align
axis.title = element_text(             #axis titles
family = font,            #font family
size = 10),               #font size
axis.text = element_text(              #axis text
family = font,            #axis famuly
size = 9),                #font size
axis.text.x = element_text(            #margin for axis text
margin=margin(5, b = 10))
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_line(aes(x = date, y = ycount)) +
theme_gppr()
theme_gppr <- function(){
font <- "Georgia"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
#grid elements
panel.grid.major = element_blank(),    #strip major gridlines
#strip minor gridlines
#since theme_minimal() already strips axis lines,
#we don't need to do that again
#text elements
plot.title = element_text(             #title
family = font,            #set font family
size = 20,                #set font size
face = 'bold',            #bold typeface
hjust = 0,                #left align
vjust = 2),               #raise slightly
plot.subtitle = element_text(          #subtitle
family = font,            #font family
size = 14),               #font size
plot.caption = element_text(           #caption
family = font,            #font family
size = 9,                 #font size
hjust = 1),               #right align
axis.title = element_text(             #axis titles
family = font,            #font family
size = 10),               #font size
axis.text = element_text(              #axis text
family = font,            #axis famuly
size = 9),                #font size
axis.text.x = element_text(            #margin for axis text
margin=margin(5, b = 10))
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_line(aes(x = date, y = ycount)) +
theme_gppr()
theme_gppr <- function(){
font <- "Georgia"   #assign font family up front
theme_classic() %+replace%    #replace elements we want to change
theme(
#grid elements
panel.grid.major = element_blank(),    #strip major gridlines
#strip minor gridlines
#since theme_minimal() already strips axis lines,
#we don't need to do that again
#text elements
plot.title = element_text(             #title
family = font,            #set font family
size = 20,                #set font size
face = 'bold',            #bold typeface
hjust = 0,                #left align
vjust = 2),               #raise slightly
plot.subtitle = element_text(          #subtitle
family = font,            #font family
size = 14),               #font size
plot.caption = element_text(           #caption
family = font,            #font family
size = 9,                 #font size
hjust = 1),               #right align
axis.title = element_text(             #axis titles
family = font,            #font family
size = 10),               #font size
axis.text = element_text(              #axis text
family = font,            #axis famuly
size = 9),                #font size
axis.text.x = element_text(            #margin for axis text
margin=margin(5, b = 10))
#since the legend often requires manual tweaking
#based on plot content, don't define it here
)
}
KDAt_nm %>%
group_by(date) %>%
mutate(ycount = n()) %>%
ungroup() %>%
ggplot() + geom_line(aes(x = date, y = ycount)) +
theme_gppr()
mday(KDAt$date)

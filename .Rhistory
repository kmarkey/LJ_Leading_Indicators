t <- tibble(PREDICTOR = names(coef(summary(mod))[,4]), P_VAL = coef(summary(mod))[,4])
write_csv(t, "LocalRStudio/assesssment/logistic_results.csv")
c <- matthew %>%
dplyr::filter(PERIOD == 2) %>%
dplyr::select(HOME_PLAYER_ID_1, HOME_PLAYER_ID_2, HOME_PLAYER_ID_3,
HOME_PLAYER_ID_4, HOME_PLAYER_ID_5,
AWAY_PLAYER_ID_1, AWAY_PLAYER_ID_2, AWAY_PLAYER_ID_3,
AWAY_PLAYER_ID_4, AWAY_PLAYER_ID_5)
C <- matthew %>%
dplyr::filter(PERIOD == 2) %>%
dplyr::select(HOME_PLAYER_ID_1, HOME_PLAYER_ID_2, HOME_PLAYER_ID_3,
HOME_PLAYER_ID_4, HOME_PLAYER_ID_5,
AWAY_PLAYER_ID_1, AWAY_PLAYER_ID_2, AWAY_PLAYER_ID_3,
AWAY_PLAYER_ID_4, AWAY_PLAYER_ID_5)
pairs <-
Map(function(x, y) apply(C[, x:y], 1, paste0, collapse="-"), 1:(ncol(C) - 1), 2:ncol(C))
as.data.frame(sort(table(unlist(pairs)), decreasing = T)[1:10])
as.data.frame(sort(table(unlist(pairs)), decreasing = T)[1:10])
pairs <-
Map(
function(x, y, z)
apply(C[, x:y:Z], 1, paste0, collapse = "-"), 1:(ncol(C) - 1), 2:ncol(C))
C2 <- matthew %>%
dplyr::filter(PERIOD == 2) %>% # 2nd quarter
dplyr::select(p1 = HOME_PLAYER_ID_1, p2 = HOME_PLAYER_ID_2, p3 = HOME_PLAYER_ID_3,
p4 = HOME_PLAYER_ID_4, p5 = HOME_PLAYER_ID_5)
p4 = AWAY_PLAYER_ID_4, p5 = AWAY_PLAYER_ID_5, `MIN`, GAME_ID)
C2 <-
bind_rows(matthew %>%
dplyr::filter(PERIOD == 2) %>% # 2nd quarter
dplyr::select(p1 = HOME_PLAYER_ID_1, p2 = HOME_PLAYER_ID_2, p3 = HOME_PLAYER_ID_3,
p4 = HOME_PLAYER_ID_4, p5 = HOME_PLAYER_ID_5, `MIN`, GAME_ID),
matthew %>%
dplyr::filter(PERIOD == 2) %>%
dplyr::select(p1 = AWAY_PLAYER_ID_1, p2 = AWAY_PLAYER_ID_2, p3 = AWAY_PLAYER_ID_3,
p4 = AWAY_PLAYER_ID_4, p5 = AWAY_PLAYER_ID_5, `MIN`, GAME_ID))
C2 <-
bind_rows(matthew %>%
dplyr::filter(PERIOD == 2) %>% # 2nd quarter
dplyr::select(p1 = HOME_PLAYER_ID_1, p2 = HOME_PLAYER_ID_2, p3 = HOME_PLAYER_ID_3,
p4 = HOME_PLAYER_ID_4, p5 = HOME_PLAYER_ID_5, `MIN`, GAME_ID),
matthew %>%
dplyr::filter(PERIOD == 2) %>%
dplyr::select(p1 = AWAY_PLAYER_ID_1, p2 = AWAY_PLAYER_ID_2, p3 = AWAY_PLAYER_ID_3,
p4 = AWAY_PLAYER_ID_4, p5 = AWAY_PLAYER_ID_5, `MIN`, GAME_ID))
C2 <-
bind_rows(matthew %>%
dplyr::filter(PERIOD == 2) %>% # 2nd quarter
dplyr::select(p1 = HOME_PLAYER_ID_1, p2 = HOME_PLAYER_ID_2, p3 = HOME_PLAYER_ID_3,
p4 = HOME_PLAYER_ID_4, p5 = HOME_PLAYER_ID_5, TIME, GAME_ID),
matthew %>%
dplyr::filter(PERIOD == 2) %>%
dplyr::select(p1 = AWAY_PLAYER_ID_1, p2 = AWAY_PLAYER_ID_2, p3 = AWAY_PLAYER_ID_3,
p4 = AWAY_PLAYER_ID_4, p5 = AWAY_PLAYER_ID_5, TIME, GAME_ID))
q <- C2 %>%
group_by(across(GAME_ID, p1, p2, p3, p4, p5), ~sum(TIME))
q <- C2 %>%
group_by(across(GAME_ID, p1, p2, p3, p4, p5, ~sum(TIME)))
group_by(across(GAME_ID, p1, p2, p3, p4, p5, .fns = list(group_time = ~sum(TIME)))
q <- C2 %>%
group_by(across(GAME_ID, p1, p2, p3, p4, p5, .fns = list(group_time = ~sum(TIME))))
q <- C2 %>%
group_by(across(GAME_ID, p1, p2, p3, p4, p5, .fns = list(group_time = ~sum(TIME))))
View(q)
q <- C2 %>%
group_by(across(GAME_ID, p1, p2, p3, p4, p5, .fns = list(group_time = ~range(TIME))))
q <- C2 %>%
group_by(across(GAME_ID, p1, p2, p3, p4, p5, .fns = list(group_time = ~max(TIME)-min(TIME))))
Canswer <- as.data.frame(sort(table(unlist(pairs)), decreasing = T)[1:10])
C %>%
dplyr::count(p1, p2, p3, p4, p5)
C2 %>%
dplyr::count(p1, p2, p3, p4, p5)
C2 %>%
dplyr::count(p1, p2, p3, p4, p5, sort = TRUE)
C2[203110]
C2[,203110]
C2["203110"]
C2[, 1]
sum(C2[, 1] == 203110)
sum(C2[, 2] == 203110)
sum(C2[, 3] == 203110)
sum(C2[, 4] == 203110)
sum(C2[, 5] == 203110)
C2 %>%
dplyr::count(p1, p2, p3, p4, p5, sort = TRUE)
# 2-player more algorithmic solution from
# https://stackoverflow.com/questions/62373173/r-how-to-find-the-10-most-common-pairs-by-row-across-5-variables-in-a-df?answertab=trending#tab-top
# but not based on minutes
pairs <-
Map(
function(x, y)
apply(C[, x:y], 1, paste0), 1:(ncol(C) - 1), 2:ncol(C))
Canswer <- as.data.frame(sort(table(unlist(pairs)), decreasing = T)[1:10])
Canswer
Canswer stack %>%
separate(Var1, into = c("PLAYER_1", "PLAYER_2"), sep = "-")
stack <- as.data.frame(sort(table(unlist(pairs)), decreasing = T)[1:10])
View(stack)
Canswer stack %>%
separate(Var1, into = c("PLAYER_1", "PLAYER_2"), sep = "-")
Canswer <- stack %>%
separate(Var1, into = c("PLAYER_1", "PLAYER_2"), sep = "-")
View(Canswer)
View(stack)
# 2-player more algorithmic solution from
# https://stackoverflow.com/questions/62373173/r-how-to-find-the-10-most-common-pairs-by-row-across-5-variables-in-a-df?answertab=trending#tab-top
# but not based on minutes
pairs <-
Map(
function(x, y)
apply(C[, x:y], 1, paste0, collapse = "-"), 1:(ncol(C) - 1), 2:ncol(C))
stack <- as.data.frame(sort(table(unlist(pairs)), decreasing = T)[1:10])
Canswer <- stack %>%
separate(Var1, into = c("PLAYER_1", "PLAYER_2"), sep = "-")
write_csv(Canswer, "LocalRStudio/assesssment/top_trios.csv)
## D
as_start <- "2022-02-18"
as_end <- "2022-02-20"
cols <- c("FG_PCT", "FG3A", "FTA", "AST", "TOV", "OREB")
# separate into before and after, then join
before <- players %>%
dplyr::filter(game_date < as_start) %>%
group_by(PLAYER_ID) %>%
dplyr::mutate(game_n = length(PLAYER_ID), mpg = sum(`MIN`) / game_n) %>%
dplyr::filter(game_n >= 15 & mpg >= 15) %>%
dplyr::select(PLAYER_ID, all_of(cols))
x <- before %>%
group_by(PLAYER_ID) %>%
dplyr::mutate(across(all_of(cols), ~ mean(.))) %>%
distinct()
after <- players %>%
dplyr::filter(game_date > as_end) %>%
group_by(PLAYER_ID) %>%
dplyr::mutate(game_n = length(PLAYER_ID), total_points = sum(PTS)) %>%
dplyr::filter(game_n >= 15 & `MIN` >= 15) %>%
dplyr::mutate(y = ifelse(total_points / game_n > 15, 1, 0)) %>%
dplyr::select(PLAYER_ID, y) %>%
distinct()
joined <- left_join(x, after, by = "PLAYER_ID") %>%
dplyr::filter(!is.na(y)) %>% # trim up before/after players
dplyr::select(-PLAYER_ID)
# logreg
mod <- glm(y ~., data = joined, family = "binomial")
summary(mod)
t <- tibble(PREDICTOR = names(coef(summary(mod))[,4]), P_VAL = coef(summary(mod))[,4])
write_csv(t, "LocalRStudio/assesssment/logistic_results.csv")
write_csv(t, "LocalRStudio/assesssment/logistic_results.csv")
write_csv(Canswer, "LocalRStudio/assesssment/top_trios.csv")
pop <- read_csv("data/census2020pop.csv") %>%
dplyr::mutate(name = tolower(NAME)) %>%
right_join(statekey, by = "name") %>%
summarise(name, abb, num, pop = ESTIMATESBASE2020, per = pop / sum(ESTIMATESBASE2020))
source("~/LocalRStudio/mhealth/figgen.R", echo=TRUE)
source("~/LocalRStudio/mhealth/figgen.R", echo=TRUE)
getwd()
library(here)
setwd("LocalRStudio/mhealth352")
setwd("LocalRStudio/mhealth352")
setwd("LocalRStudio/mhealth352")
getwd()
source("digest.R")
setwd("~/LocalRStudio/mhealth352")
setwd("LocalRStudio/mhealth352")
#============================== stocks =========================================
GM <- read_csv("data/in/GM.csv")
library(readr)
#============================== stocks =========================================
GM <- read_csv("data/in/GM.csv")
setwd("~/LocalRStudio/LJ_Leading_Indicators")
#============================== stocks =========================================
GM <- read_csv("data/in/GM.csv")
#============================ Fred data and stocks from python =================
econ <- list.files("data/in/") %>%
lapply(read_csv) %>%
bind_rows
source("~/LocalRStudio/LJ_Leading_Indicators/Digest.R", echo=TRUE)
library(mice)
source("~/LocalRStudio/LJ_Leading_Indicators/Transform.R", echo=TRUE)
source("~/LocalRStudio/LJ_Leading_Indicators/Digest.R", echo=TRUE)
#============================ Fred data and stocks from python =================
econ <- list.files("~/data/in/") %>%
lapply(read_csv) %>%
bind_rows %>%
right_join(blank_m, by = "date") %>% # arranges high to low
dplyr::mutate(across(is.numeric, .fns = list(raw = ~.,
lag1 = ~ lag(., 1),
lag2 = ~ lag(., 2),
lag3 = ~ lag(., 3),
lag6 = ~ lag(., 6),
lag12 = ~ lag(., 12)),
.names = "{.col}_{.fn}"),
.keep = "unused")
#============================ Fred data and stocks from python =================
econ <- list.files("~/data/in/") %>%
lapply(read_csv) %>%
bind_rows
#============================ Fred data and stocks from python =================
econ <- list.files("~/data/in/")
#============================ Fred data and stocks from python =================
econ <- list.files("~data/in/")
#============================ Fred data and stocks from python =================
econ <- list.files("data/in/")
#============================ Fred data and stocks from python =================
econ <- list.files("data/in/") %>%
lapply(read_csv) %>%
bind_rows
#============================ Fred data and stocks from python =================
econ <- list.files(paste0(getwd(), "data/in/")) %>%
lapply(read_csv) %>%
bind_rows
#============================ Fred data and stocks from python =================
econ <- list.files("./data/in/") %>%
lapply(read_csv) %>%
bind_rows
#============================ Fred data and stocks from python =================
econ <- list.files(path = "./data/in/") %>%
lapply(read_csv) %>%
bind_rows
mydir <- cwd()
getwd()
mydir <- getwd()
mydir <- paste0(getwd(), "/LocalRStudio/LJ_Leading_Indicators")
#============================ Fred data and stocks from python =================
econ <- list.files(path = paste0(mydir, "data/in/")) %>%
lapply(read_csv) %>%
bind_rows
#============================ Fred data and stocks from python =================
econ <- list.files(path = paste0(mydir, "data/in/")) %>%
lapply(read_csv)
#============================ Fred data and stocks from python =================
econ <- list.files(path = paste0(mydir, "data/in/")) %>%
lapply(read_csv)
#============================ Fred data and stocks from python =================
econ <- list.files(path = paste0(mydir, "data/in/"))
list.files(mydir)
mydir <- paste0(getwd(), "/LocalRStudio/LJ_Leading_Indicators/")
list.files(mydir)
setwd("/LocalRStudio/LJ_Leading_Indicators/")
setwd("~/LocalRStudio/LJ_Leading_Indicators/")
#============================ Fred data and stocks from python =================
econ <- list.files(path = getwd()))
#============================ Fred data and stocks from python =================
econ <- list.files(path = getwd())
#============================ Fred data and stocks from python =================
econ <- list.files(path = "~/data/in/")
#============================ Fred data and stocks from python =================
econ <- list.files(path = "~/data/in")
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in")
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in") %>%
lapply(read_csv)
#============================ Fred data and stocks from python =================
econ <- list.files(path = "C:/Users/keato/Documents/LocalRStudio/LJ_Leading_Indicators/data/in") %>%
lapply(read_csv)
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in", full.names = TRUE) %>%
lapply(read_csv)
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
View(econ)
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_cols
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
View(econ)
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in/stock", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_rows
View(econ)
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in/stock", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_cols
#============================ Fred data and stocks from python =================
econ <- list.files(path = "data/in/stock", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_cols
View(econ)
#============================ Fred data and stocks from python =================
stock_list <- list.files(path = "data/in/stock", full.names = TRUE)
#============================ Fred data and stocks from python =================
stock_list <- list.files(path = "data/in/stock", full.names = FALSE)
stock_names <- grep(".csv", stock_list, "")
stock_names <- str_remove(stock_list, ".csv")
View(econ)
#============================ Fred data and stocks from python =================
stock_list <- list.files(path = "data/in/stocks", full.names = TRUE)
stock_names <- str_remove(stock_list, ".csv")
stock_names <- str_remove(stock_list, "{/<?}*.csv")
stock_names <- str_remove(stock_list, "{/?<}*.csv")
stock_names <- str_remove(stock_list, "[\].csv")
stock_names <- str_remove(stock_list, "[\\].csv")
stock_names <- str_remove(stock_list, "[\\\].csv")
stock_names <- str_remove(stock_list, "[/].csv")
stock_names <- str_remove(stock_list, "[/]*.csv")
stock_names <- str_remove(stock_list, "[/].*.csv")
stock_names <- str_xtracte(stock_list, "[A-Z")
stock_names <- str_extract(stock_list, "[A-Z")
stock_names <- str_extract(stock_list, "[A-Z]")
stock_names <- str_extract(stock_list, "[[A-Z]]")
stock_names <- str_extract(stock_list, "[A-Z]*")
stock_names <- str_extract(stock_list, "[A-Z].")
stock_names <- str_extract(stock_list, "[A-Z].*")
stock_names <- str_extract(stock_list, "[[::A-Z::]")
stock_names <- str_extract(stock_list, "[A-Z]+")
econ <- list.files(path = "data/in/stocks", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_cols %>%
right_join(blank_m, by = "date") %>% # arranges high to low
dplyr::mutate(across(is.numeric, .fns = list(raw = ~.,
lag1 = ~ lag(., 1),
lag2 = ~ lag(., 2),
lag3 = ~ lag(., 3),
lag6 = ~ lag(., 6),
lag12 = ~ lag(., 12)),
.names = "{.col}_{.fn}"),
.keep = "unused")
econ <- list.files(path = "data/in/stocks", full.names = TRUE) %>%
lapply(read_csv) %>%
bind_cols
View(econ)
GM <- read_csv("data/in/stock/GM.csv")
GM <- read_csv("data/in/stocks/GM.csv")
FB <- read_csv("data/in/stocks/F.csv")
AN <- read_csv("data/in/stocks/AN.csv")
TSLA <- read_csv("data/in/stocks/TSLA.csv")
stocks <- blank_m %>%
left_join(GM, by = "date") %>%
left_join(FB, by = "date") %>%
left_join(AN, by = "date") %>%
left_join(TSLA, by = "date") %>%# arranges high to low
dplyr::mutate(across(is.numeric, .fns = list(raw = ~.,
lag1 = ~ lag(., 1),
lag2 = ~ lag(., 2),
lag3 = ~ lag(., 3),
lag6 = ~ lag(., 6),
lag12 = ~ lag(., 12)),
.names = "{.col}_{.fn}"),
.keep = "unused")
fred <- read_csv("data/in/fred.csv")
fred <- fred %>%
right_join(blank_m, by = "date") %>% # arranges high to low
dplyr::mutate(across(is.numeric, .fns = list(raw = ~.,
lag1 = ~ lag(., 1),
lag2 = ~ lag(., 2),
lag3 = ~ lag(., 3),
lag6 = ~ lag(., 6),
lag12 = ~ lag(., 12)),
.names = "{.col}_{.fn}"),
.keep = "unused")
complete_dirty <- left_join(dplyr::select(month, date, n),  # combine all to 1 df
oil, by = "date") %>%
left_join(NGF1, by = "date") %>%
left_join(NGF2, by = "date") %>%
left_join(IR1, by = "date") %>%
left_join(HPISTB, by = "date") %>%
left_join(HPIWA, by = "date") %>%
left_join(FRM15, by = "date") %>%
left_join(FRM30, by = "date") %>%
left_join(ARM5, by = "date") %>%
left_join(fred, by = "date") %>%
left_join(stocks, by = "date")
# add more later
#######################################
tibble::rowid_to_column("month") %>%
dplyr::select(-date)
complete_dirty <- left_join(dplyr::select(month, date, n),  # combine all to 1 df
oil, by = "date") %>%
left_join(NGF1, by = "date") %>%
left_join(NGF2, by = "date") %>%
left_join(IR1, by = "date") %>%
left_join(HPISTB, by = "date") %>%
left_join(HPIWA, by = "date") %>%
left_join(FRM15, by = "date") %>%
left_join(FRM30, by = "date") %>%
left_join(ARM5, by = "date") %>%
left_join(fred, by = "date") %>%
left_join(stocks, by = "date") %>%
# add more later
#######################################
tibble::rowid_to_column("month") %>%
dplyr::select(-date)
#============================ wide filter to cor ===============================
write_csv(complete_dirty, "data/out/complete.csv")
# change date to month key col
complete_cor <- complete_dirty %>%
cor()
# select for co  >= 0.25
feature_dict <- complete_cor[complete_cor['n',] >= cor_max | complete_cor['n',] <= -cor_max, 'n']
# select features in features dict
features <- dplyr::select(complete_dirty, all_of(names(feature_dict))) %>%
dplyr::select(-ends_with(c("_raw", "_lag1", "_lag2")))
#==================================== write out ================================
write_csv(features, "data/out/features.csv")
exam(stocks)
GM <- read_csv("data/in/stocks/GM.csv") %>%
rename(cGM = close)
View(GM)
GM <- read_csv("data/in/stocks/GM.csv") %>%
rename(GM = close)
FB <- read_csv("data/in/stocks/F.csv") %>%
rename(FB = close)
AN <- read_csv("data/in/stocks/AN.csv") %>%
rename(AN = close)
TSLA <- read_csv("data/in/stocks/TSLA.csv") %>%
rename(TSLA = close)
stocks <- blank_m %>%
left_join(GM, by = "date") %>%
left_join(FB, by = "date") %>%
left_join(AN, by = "date") %>%
left_join(TSLA, by = "date") %>%# arranges high to low
dplyr::mutate(across(is.numeric, .fns = list(raw = ~.,
lag1 = ~ lag(., 1),
lag2 = ~ lag(., 2),
lag3 = ~ lag(., 3),
lag6 = ~ lag(., 6),
lag12 = ~ lag(., 12)),
.names = "{.col}_{.fn}"),
.keep = "unused")
exam(stocks)
source("~/LocalRStudio/LJ_Leading_Indicators/Digest.R", echo=TRUE)
source("~/LocalRStudio/LJ_Leading_Indicators/Digest.R", echo=TRUE)
trends <- blank_m %>%
left_join(trends, by = "date")  # arranges high to low
#=============================== google trends =================================
trends <- read_csv("data/in/trends.csv")
trends <- blank_m %>%
left_join(trends, by = "date")  # arranges high to low
trends <- blank_m %>%
left_join(trends, by = "date") %>% # arranges high to low
dplyr::mutate(across(is.numeric, .fns = list(raw = ~.,
lag1 = ~ lag(., 1),
lag2 = ~ lag(., 2),
lag3 = ~ lag(., 3),
lag6 = ~ lag(., 6),
lag12 = ~ lag(., 12)),
.names = "{.col}_{.fn}"),
.keep = "unused")
View(trends)
#=============================== google trends =================================
trends <- read_csv("data/in/trends.csv")
View(trends)
#=============================== google trends =================================
trends <- read_csv("data/in/trends.csv")
trends <- blank_m %>%
left_join(trends, by = "date") %>% # arranges high to low
dplyr::mutate(across(is.numeric, .fns = list(raw = ~.,
lag1 = ~ lag(., 1),
lag2 = ~ lag(., 2),
lag3 = ~ lag(., 3),
lag6 = ~ lag(., 6),
lag12 = ~ lag(., 12)),
.names = "{.col}_{.fn}"),
.keep = "unused")
View(trends)
scaling <- function(x) { # normalization function
return((x - min(x))/(max(x) - min(x)))
}
complete_dirty <- left_join(dplyr::select(month, date, n),  # combine all to 1 df
oil, by = "date") %>%
left_join(NGF1, by = "date") %>%
left_join(NGF2, by = "date") %>%
left_join(IR1, by = "date") %>%
left_join(HPISTB, by = "date") %>%
left_join(HPIWA, by = "date") %>%
left_join(FRM15, by = "date") %>%
left_join(FRM30, by = "date") %>%
left_join(ARM5, by = "date") %>%
# econ
left_join(fred, by = "date") %>%
left_join(stocks, by = "date") %>%
left_join(trends, by = "date")
complete_dirty <- left_join(dplyr::select(month, date, n),  # combine all to 1 df
oil, by = "date") %>%
left_join(NGF1, by = "date") %>%
left_join(NGF2, by = "date") %>%
left_join(IR1, by = "date") %>%
left_join(HPISTB, by = "date") %>%
left_join(HPIWA, by = "date") %>%
left_join(FRM15, by = "date") %>%
left_join(FRM30, by = "date") %>%
left_join(ARM5, by = "date") %>%
# econ
left_join(fred, by = "date") %>%
left_join(stocks, by = "date") %>%
left_join(trends, by = "date") %>%
# google results
# add more later
#######################################
tibble::rowid_to_column("month") %>%
dplyr::select(-date)
#============================ wide filter to cor ===============================
write_csv(complete_dirty, "data/out/complete.csv")
# change date to month key col
complete_cor <- complete_dirty %>%
cor()
# select for co  >= 0.25
feature_dict <- complete_cor[complete_cor['n',] >= cor_max | complete_cor['n',] <= -cor_max, 'n']
# select features in features dict
features <- dplyr::select(complete_dirty, all_of(names(feature_dict))) %>%
dplyr::select(-ends_with(c("_raw", "_lag1", "_lag2")))
#==================================== write out ================================
write_csv(features, "data/out/features.csv")
